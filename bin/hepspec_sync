#!/bin/env python

# Copyright (c) 2013 GRNET S.A., SRCE, IN2P3 CNRS Computing Centre
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of either GRNET S.A., SRCE or IN2P3 CNRS Computing
# Centre
# 
# The work represented by this source file is partially funded by
# the EGI-InSPIRE project through the European Commission's 7th
# Framework Programme (contract # INFSO-RI-261323) 

import urllib
import urllib2
import os
import json
import datetime
import httplib
import sys
import urlparse

import avro.schema
from avro.datafile import DataFileReader
from avro.datafile import DataFileWriter
from avro.io import DatumReader
from avro.io import DatumWriter

defaultConfig = '/etc/ar-sync/hepspec-sync.conf'

readers = ['gstat']
writers = ['file', 'avro']

##############################
# create output filename
##############################
def createOutputFilename(directory, fileTemplate, timestamp):
    return directory + '/' + (fileTemplate % timestamp)

##############################
# load config
##############################
def loadConfiguration():
     #load config
     configFile = None
     configFields = dict()
     if os.path.isfile(defaultConfig):
         configFile = open(defaultConfig, 'r')
         lines = configFile.readlines()

         for line in lines:
             if line[0] == '#':
                 continue
             splitLine = line.split('=')
             if len(splitLine) > 1:
                 key = splitLine[0].strip()
                 value = splitLine[1].strip()
                 value = value.decode('string_escape')
                 if value[0] == "'":
                     if value [-1] == "'":
                         value = value[1:-1]
                     else:
                         continue
                 elif value[0] == '"':
                     if value [-1] == '"':
                         value = value[1:-1]
                     else:
                         continue
                 else:
                     value = int(value)
                 configFields[key] = value

         configFile.close()

     return configFields

##############################
# readers
##############################
class WeightReader(object):

    def loadConfiguration(self, configFields):
        """Loading config"""
    
    def getWeights(self):
        """Getting weights"""

class HEPSPECReader(WeightReader):
     
    def __init__(self):
        self.GstatRequest = 'http://gstat2.grid.sinica.edu.tw/gstat/summary/json/'

    def loadConfiguration(self, configFields):
        if 'GstatRequest' in configFields:
             self.GstatRequest = configFields['GstatRequest']

    def getWeights(self):
    	# load server data
	urlFile = urllib2.urlopen(self.GstatRequest)
	json_data = json.load(urlFile)
	urlFile.close();
	weights = dict()
	for site in json_data:
		key = site['Sitename']
		val = site['HEPSPEC06']
		weights[key] = val
        return weights

##############################
# writers
##############################
class WeightWriter(object):

    def loadConfiguration(self,configFields):
        """Loading config"""
    
    def outputFilenameForDate(self, date):
    	"""Output filename for given date"""

    def loadOldData(self, date):
    	"""Load pre-existing data"""

    def writeWeights(self, weights, date):
        """Getting downtimes"""

class FileWritter(WeightWriter):

    def __init__(self):
        self.outputDir = '/var/lib/ar-sync'
        self.outputFileTemplate = 'hepspec_sync_%s.out'
        self.outputFileFormat = '%s\001%s\r\n'
        self.outputFileDelimiter = '\001'

    def loadConfiguration(self, configFields):
        if 'outputDir' in configFields:
             self.outputDir = configFields['outputDir']
        if 'outputFileTemplate' in configFields:
             self.outputFileTemplate = configFields['outputFileTemplate']
        if 'outputFileFormat' in configFields:
             self.outputFileFormat = configFields['outputFileFormat']
        if 'outputFileDelimiter' in configFields:
            self.outputFileDelimiter = configFields['outputFileDelimiter']

    def outputFilenameForDate(self, date):
    	return createOutputFilename(self.outputDir, self.outputFileTemplate, date)

    def loadOldData(self, date):
	filename = createOutputFilename(self.outputDir, self.outputFileTemplate, date)
        oldDataDict = dict()

        if not os.path.isfile(filename):
            return oldDataDict        

        oldDataFile = open(filename, 'r')
        oldData = oldDataFile.read().splitlines()
        oldDataFile.close();

        for line in oldData:
            if len(line) == 0 or line[0] == '#':
                continue

            oldDataFields = line.split(self.outputFileDelimiter)
            if len(oldDataFields) > 1:
                key = oldDataFields[0].strip()
                val = oldDataFields[1].strip()
                oldDataDict[key] = val

        return oldDataDict

    def writeWeights(self, weights, date):
        filename = createOutputFilename(self.outputDir, self.outputFileTemplate, date)
        outFile = open(filename, 'w')
        for key in weights:
            w = weights[key]
            outFile.write(self.outputFileFormat % ( key, w))
        outFile.close();

class AvroWritter(WeightWriter):

    def __init__(self):
        self.avroOutputDir = '/var/lib/ar-sync'
        self.avroOutputFileTemplate = 'weights_sync_%s.avro'
        self.avroOutputSchema = '/etc/ar-sync/weight_sites.avsc'

    def loadConfiguration(self, configFields):
        if 'avroOutputDir' in configFields:
             self.avroOutputDir = configFields['avroOutputDir']
        if 'avroOutputFileTemplate' in configFields:
             self.avroOutputFileTemplate = configFields['avroOutputFileTemplate']
        if 'avroOutputSchema' in configFields:
             self.avroOutputSchema = configFields['avroOutputSchema']

    def outputFilenameForDate(self, date):
        createOutputFilename(self.avroOutputDir, self.avroOutputFileTemplate, date)

    def loadOldData(self, date):
        filename = createOutputFilename(self.avroOutputDir, self.avroOutputFileTemplate, date)
        oldDataDict = dict()

        if not os.path.isfile(filename):
            return oldDataDict        

        reader = DataFileReader(open(filename, "r"), DatumReader())
	for weight in reader:
            oldDataDict[weight["site"]] = weight["weight"]
	reader.close()

        return oldDataDict

    def writeWeights(self, weights, date):
        filename = createOutputFilename(self.avroOutputDir, self.avroOutputFileTemplate, date)

        schema = avro.schema.parse(open(self.avroOutputSchema).read())
        avroFile = open(filename, 'w+')
        writer = DataFileWriter(avroFile, DatumWriter(), schema)

        for key in weights:
            w = weights[key]
            writer.append({"type": "hepspec", "site": key, "weight": w})

        writer.close()
        avroFile.close()

##############################
# main
##############################

# load configuration
config = loadConfiguration()

# init readers and writters
readerInstances = list()
writerInstances = list()

for reader in readers:
    if reader == 'gstat':
        readerInstance = HEPSPECReader()
        readerInstance.loadConfiguration(config)
        readerInstances.append(readerInstance)

for writer in writers:
    if writer == 'file':
        writerInstance = FileWritter()
        writerInstance.loadConfiguration(config)
        writerInstances.append(writerInstance)
    elif writer == 'avro':
        writerInstance = AvroWritter()
        writerInstance.loadConfiguration(config)
        writerInstances.append(writerInstance)

# find old data
if len(writerInstances) > 0:

    timestamp = datetime.datetime.utcnow().strftime('%Y_%m_%d')
    oldDate = datetime.datetime.utcnow()
    oldFilename = writerInstances[0].outputFilenameForDate(oldDate.strftime('%Y_%m_%d'))

    i = 0;
    oldDataExists = True
    while not os.path.isfile(oldFilename):
	oldDate = oldDate - datetime.timedelta(days=1)
	oldFilename = writerInstances[0].outputFilenameForDate(oldDate.strftime('%Y_%m_%d'))
	i = i+1
        if i >= 30:
	    oldDataExists = False
	    break

# load old data
oldData = dict()
if oldDataExists:
    for writer in writerInstances:
        oldData.update(writer.loadOldData(oldDate.strftime('%Y_%m_%d')))

# load new data
newData = dict()
for reader in readerInstances:
    newData.update(reader.getWeights());

# fill new list
for key in newData:
    newVal = int(newData[key])
    if newVal <= 0:
	if key in oldData:
	    newVal = int(oldData[key])
    if key not in oldData:
	oldData[key] = str(newVal)
    newData[key] = str(newVal)

# fill old list
for key in oldData:
	oldVal = int(oldData[key])
	if oldVal <= 0:
            if key in newData:
                oldData[key] = newData[key]
	if key not in newData:
	    newData[key] = oldData[key]

# write old & new data
for writer in writerInstances:
	if oldDataExists:
	    writer.writeWeights(oldData, oldDate.strftime('%Y_%m_%d'))
	writer.writeWeights(newData, timestamp)

